"""create_essay_tables

Revision ID: 86b49ba15460
Revises: 99bee704f4fa
Create Date: 2025-07-12 19:45:18.293937

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '86b49ba15460'
down_revision: Union[str, Sequence[str], None] = '99bee704f4fa'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create essay table only if it doesn't exist
    bind = op.get_bind()
    inspector = sa.inspect(bind)
    
    if 'essay' not in inspector.get_table_names():
        op.create_table('essay',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('title', sa.String(length=200), nullable=False),
        sa.Column('question', sa.Text(), nullable=False),
        sa.Column('type', sa.String(length=20), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.Column('owner_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
    
    # Create essayversion table only if it doesn't exist
    if 'essayversion' not in inspector.get_table_names():
        op.create_table('essayversion',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('version_number', sa.Integer(), nullable=False),
        sa.Column('content', sa.Text(), nullable=False),
        sa.Column('scores', sa.JSON(), nullable=False),
        sa.Column('total_score', sa.Integer(), nullable=False),
        sa.Column('max_score', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('essay_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['essay_id'], ['essay.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
    
    # Create suggestioncard table only if it doesn't exist
    if 'suggestioncard' not in inspector.get_table_names():
        op.create_table('suggestioncard',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('card_id', sa.String(length=50), nullable=False),
        sa.Column('type', sa.String(length=20), nullable=False),
        sa.Column('priority', sa.String(length=10), nullable=False),
        sa.Column('data', sa.JSON(), nullable=False),
        sa.Column('applied', sa.Boolean(), nullable=False),
        sa.Column('applied_at', sa.DateTime(), nullable=True),
        sa.Column('version_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['version_id'], ['essayversion.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
    
    # Create indexes only if tables exist
    existing_indexes = inspector.get_indexes('essay') if 'essay' in inspector.get_table_names() else []
    existing_index_names = [idx['name'] for idx in existing_indexes]
    
    if 'essay' in inspector.get_table_names():
        if 'idx_essay_owner_created' not in existing_index_names:
            op.create_index('idx_essay_owner_created', 'essay', ['owner_id', 'created_at'], unique=False)
        if 'idx_essay_owner_type' not in existing_index_names:
            op.create_index('idx_essay_owner_type', 'essay', ['owner_id', 'type'], unique=False)
    
    if 'essayversion' in inspector.get_table_names():
        existing_version_indexes = inspector.get_indexes('essayversion')
        existing_version_index_names = [idx['name'] for idx in existing_version_indexes]
        if 'idx_essay_version_created' not in existing_version_index_names:
            op.create_index('idx_essay_version_created', 'essayversion', ['created_at'], unique=False)
        if 'idx_essay_version_essay_version' not in existing_version_index_names:
            op.create_index('idx_essay_version_essay_version', 'essayversion', ['essay_id', 'version_number'], unique=False)
    
    if 'suggestioncard' in inspector.get_table_names():
        existing_suggestion_indexes = inspector.get_indexes('suggestioncard')
        existing_suggestion_index_names = [idx['name'] for idx in existing_suggestion_indexes]
        if 'idx_suggestion_card_priority' not in existing_suggestion_index_names:
            op.create_index('idx_suggestion_card_priority', 'suggestioncard', ['priority'], unique=False)
        if 'idx_suggestion_card_version_type' not in existing_suggestion_index_names:
            op.create_index('idx_suggestion_card_version_type', 'suggestioncard', ['version_id', 'type'], unique=False)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    bind = op.get_bind()
    inspector = sa.inspect(bind)
    
    # Drop indexes safely
    if 'suggestioncard' in inspector.get_table_names():
        try:
            op.drop_index('idx_suggestion_card_version_type', table_name='suggestioncard')
        except:
            pass
        try:
            op.drop_index('idx_suggestion_card_priority', table_name='suggestioncard')
        except:
            pass
    
    if 'essayversion' in inspector.get_table_names():
        try:
            op.drop_index('idx_essay_version_essay_version', table_name='essayversion')
        except:
            pass
        try:
            op.drop_index('idx_essay_version_created', table_name='essayversion')
        except:
            pass
    
    if 'essay' in inspector.get_table_names():
        try:
            op.drop_index('idx_essay_owner_type', table_name='essay')
        except:
            pass
        try:
            op.drop_index('idx_essay_owner_created', table_name='essay')
        except:
            pass
    
    # Drop tables safely
    if 'suggestioncard' in inspector.get_table_names():
        op.drop_table('suggestioncard')
    if 'essayversion' in inspector.get_table_names():
        op.drop_table('essayversion')
    if 'essay' in inspector.get_table_names():
        op.drop_table('essay')
    
    # ### end Alembic commands ###
